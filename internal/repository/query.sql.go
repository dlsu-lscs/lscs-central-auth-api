// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
)

const checkEmailIfMember = `-- name: CheckEmailIfMember :one
SELECT email FROM members WHERE email = ?
`

func (q *Queries) CheckEmailIfMember(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, checkEmailIfMember, email)
	err := row.Scan(&email)
	return email, err
}

const getMember = `-- name: GetMember :one
SELECT id, full_name, nickname, email, telegram, position_id, committee_id FROM members WHERE email = ?
`

func (q *Queries) GetMember(ctx context.Context, email string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, email)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Nickname,
		&i.Email,
		&i.Telegram,
		&i.PositionID,
		&i.CommitteeID,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT id, full_name, nickname, email, telegram, position_id, committee_id FROM members ORDER BY email
`

func (q *Queries) ListMembers(ctx context.Context) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Nickname,
			&i.Email,
			&i.Telegram,
			&i.PositionID,
			&i.CommitteeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
